{"/home/travis/build/npmtest/node-npmtest-node-rest-client/test.js":"/* istanbul instrument in package npmtest_node_rest_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-rest-client/lib.npmtest_node_rest_client.js":"/* istanbul instrument in package npmtest_node_rest_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_rest_client = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_rest_client = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-rest-client/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-rest-client && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_rest_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_rest_client\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_rest_client.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_rest_client.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_rest_client.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_rest_client.__dirname +\n                    '/lib.npmtest_node_rest_client.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-rest-client/node-rest-client/lib/node-rest-client.js":"var http = require('follow-redirects').http,\r\nhttps = require('follow-redirects').https,\r\nurlParser = require('url'),\r\nutil = require(\"util\"),\r\nevents = require(\"events\"),\r\nzlib = require(\"zlib\"),\r\nnode_debug = require(\"debug\")(\"NRC\");\r\n\r\nexports.Client = function (options){\r\n    var self = this,\r\n     // parser response manager\r\n     parserManager = require(\"./nrc-parser-manager\")(),\r\n     serializerManager = require(\"./nrc-serializer-manager\")(),\r\n    // connection manager\r\n    connectManager = new ConnectManager(this, parserManager),\r\n    // io facade to parsers and serailiazers\r\n    ioFacade = function(parserManager, serializerManager){\r\n        // error execution context\r\n        var  errorContext = function(logic){\r\n            return function(){\r\n                try{\r\n                    return logic.apply(this, arguments);\r\n                }catch(err){\r\n                    self.emit('error',err);\r\n                }\r\n              };\r\n        },\r\n        result={\"parsers\":{}, \"serializers\":{}};\r\n\r\n    // parsers facade\r\n    result.parsers.add = errorContext(parserManager.add);\r\n    result.parsers.remove = errorContext(parserManager.remove);\r\n    result.parsers.find = errorContext(parserManager.find);\r\n    result.parsers.getAll = errorContext(parserManager.getAll);\r\n    result.parsers.getDefault = errorContext(parserManager.getDefault);\r\n    result.parsers.clean = errorContext(parserManager.clean);\r\n    \r\n    // serializers facade\r\n    result.serializers.add = errorContext(serializerManager.add);\r\n    result.serializers.remove = errorContext(serializerManager.remove);\r\n    result.serializers.find = errorContext(serializerManager.find);\r\n    result.serializers.getAll = errorContext(serializerManager.getAll);\r\n    result.serializers.getDefault = errorContext(serializerManager.getDefault);\r\n    result.serializers.clean = errorContext(serializerManager.clean);\r\n\r\n    return result;\r\n    \r\n    }(parserManager,serializerManager),\r\n    // declare util constants\r\n    CONSTANTS={\r\n        HEADER_CONTENT_LENGTH:\"Content-Length\"\r\n    };\r\n\r\n\r\n    self.options = options || {},\r\n    self.useProxy = (self.options.proxy || false)?true:false,\r\n    self.useProxyTunnel = (!self.useProxy || self.options.proxy.tunnel===undefined)?false:self.options.proxy.tunnel,\r\n    self.proxy = self.options.proxy,\r\n    self.connection = self.options.connection || {},\r\n    self.mimetypes = self.options.mimetypes || {},\r\n    self.requestConfig = self.options.requestConfig || {},\r\n    self.responseConfig = self.options.responseConfig || {};\r\n\r\n    // namespaces for methods, parsers y serializers\r\n    this.methods={};\r\n    this.parsers={};\r\n    this.serializers={};\r\n\r\n    // Client Request to be passed to ConnectManager and returned\r\n    // for each REST method invocation\r\n    var ClientRequest =function(){\r\n        events.EventEmitter.call(this);\r\n    };\r\n\r\n\r\n    util.inherits(ClientRequest, events.EventEmitter);\r\n    \r\n\r\n    ClientRequest.prototype.end = function(){\r\n        if(this._httpRequest) {\r\n            this._httpRequest.end();\r\n        }\r\n    };\r\n\r\n    ClientRequest.prototype.setHttpRequest=function(req){\r\n        this._httpRequest = req;\r\n    };\r\n\r\n\r\n\r\n    var Util = {\r\n       createProxyPath:function(url){\r\n        var result = url.host;\r\n         // check url protocol to set path in request options\r\n         if (url.protocol === \"https:\"){\r\n            // port is set, leave it, otherwise use default https 443\r\n            result = (url.host.indexOf(\":\") == -1?url.hostname + \":443\":url.host);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    createProxyHeaders:function(url){\r\n        var result ={};\r\n        // if proxy requires authentication, create Proxy-Authorization headers\r\n        if (self.proxy.user && self.proxy.password){\r\n            result[\"Proxy-Authorization\"] = \"Basic \" + new Buffer([self.proxy.user,self.proxy.password].join(\":\")).toString(\"base64\");\r\n        }\r\n        // no tunnel proxy connection, we add the host to the headers\r\n        if(!self.useProxyTunnel)\r\n            result[\"host\"] = url.host;\r\n\r\n        return result;\r\n    },\r\n    createConnectOptions:function(connectURL, connectMethod){\r\n        debug(\"connect URL = \", connectURL);\r\n        var url = urlParser.parse(connectURL),\r\n        path,\r\n        result={},\r\n        protocol = url.protocol.indexOf(\":\") == -1?url.protocol:url.protocol.substring(0,url.protocol.indexOf(\":\")),\r\n        defaultPort = protocol === 'http'?80:443;\r\n\r\n        result ={\r\n            host: url.host.indexOf(\":\") == -1?url.host:url.host.substring(0,url.host.indexOf(\":\")),\r\n            port: url.port === undefined?defaultPort:url.port,\r\n            path: url.path,\r\n            protocol:protocol,\r\n            href:url.href\r\n        };\r\n\r\n             if (self.useProxy) result.agent = false; // cannot use default\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// agent in proxy mode\r\n\r\n             if (self.options.user && self.options.password){\r\n                result.auth = [self.options.user,self.options.password].join(\":\");\r\n\r\n            } else if (self.options.user && !self.options.password){\r\n                 // some sites only needs user with no password to\r\n\t\t\t\t\t// authenticate\r\n                 result.auth = self.options.user + \":\";\r\n             }\r\n\r\n            // configure proxy connection to establish a tunnel\r\n            if (self.useProxy){\r\n\r\n                result.proxy ={\r\n                    host: self.proxy.host,\r\n                    port: self.proxy.port,\r\n                    method: self.useProxyTunnel?'CONNECT':connectMethod,// if\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// proxy\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// tunnel\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// use\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 'CONNECT'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// method,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// else\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// method\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// request,\r\n                    path: self.useProxyTunnel?this.createProxyPath(url):connectURL, // if\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// proxy\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// tunnel\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// set\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// proxy\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// path\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// else\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// get\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// request\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// path,\r\n                    headers: this.createProxyHeaders(url) // createProxyHeaders\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// add correct\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// headers depending\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// of proxy\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// connection type\r\n                };\r\n            }\r\n\r\n            if(self.connection && typeof self.connection === 'object'){\r\n                for(var option in self.connection){\r\n                    result[option] = self.connection[option];\r\n                }\r\n            }\r\n\r\n            // don't use tunnel to connect to proxy, direct request\r\n            // and delete proxy options\r\n            if (!self.useProxyTunnel){\r\n                for (var proxyOption in result.proxy){\r\n                    result[proxyOption] = result.proxy[proxyOption];\r\n                }\r\n\r\n                delete result.proxy;\r\n            }\r\n\r\n            // add general request and response config to connect options\r\n\r\n            result.requestConfig = self.requestConfig;\r\n            result.responseConfig = self.responseConfig;\r\n\r\n\r\n            return result;\r\n        },\r\n        decodeQueryFromURL: function(connectURL){\r\n            var url = urlParser.parse(connectURL),\r\n            query = url.query.substring(1).split(\"&\"),\r\n            keyValue,\r\n            result={};\r\n\r\n            // create decoded args from key value elements in query+\r\n            for (var i=0;i<query.length;i++){\r\n                keyValue = query[i].split(\"=\");\r\n                result[keyValue[0]] = decodeURIComponent(keyValue[1]);\r\n            }\r\n\r\n            return result;\r\n\r\n        },\r\n        serializeEncodeQueryFromArgs:function(args){\r\n\r\n            function serialize(obj, parent) {\r\n              var tokens = [], propertyName;\r\n              // iterate over all properties\r\n              for(propertyName in obj) {\r\n                  // if object has property (it's not an array iteration)\r\n                  if (obj.hasOwnProperty(propertyName)) {\r\n                  // if property has parent, add nested reference\r\n                  var parsedProperty = parent ? parent + \"[\" + propertyName + \"]\" : propertyName, propertyValue = obj[propertyName];\r\n\r\n                  // if property has value and is object (we must iterate\r\n\t\t\t\t\t// again, not final leaf)\r\n                  // iterate over object property passing current parsed\r\n\t\t\t\t\t// property as parent\r\n                  // else add encoded parsed property and value to result\r\n\t\t\t\t\t// array\r\n                  tokens.push((propertyValue !== null && typeof propertyValue === \"object\") ?\r\n                    serialize(propertyValue, parsedProperty) :\r\n                    encodeURIComponent(parsedProperty) + \"=\" + encodeURIComponent(propertyValue));\r\n                    }\r\n                }\r\n                    return tokens.join(\"&\");\r\n            }\r\n\r\n          debug(\"args is\", args);\r\n                // check args consistency\r\n                if (args && typeof args !== 'object' )\r\n                    self.emit('error','cannot serialize parameters: invalid type ' + (typeof  args) + ' should be an object type');\r\n\r\n                return serialize(args);\r\n        },\r\n        parsePathParameters:function(args,url){\r\n            var result = url;\r\n            if (!args || !args.path) return url;\r\n\r\n            for (var placeholder in args.path){\r\n                var regex = new RegExp(\"\\\\$\\\\{\" + placeholder + \"\\\\}\",\"i\");\r\n                result = result.replace(regex,args.path[placeholder]);\r\n                \r\n            }\r\n            \r\n            return result;\r\n\r\n        },\r\n        overrideClientConfig:function(connectOptions,methodOptions){\r\n            function validateReqResOptions(reqResOption){\r\n                return (reqResOption && typeof reqResOption === 'object');\r\n            }\r\n            // check if we have particular request or response config set on\r\n\t\t\t// this method invocation\r\n            // and override general request/response config\r\n            if (validateReqResOptions(methodOptions.requestConfig)){\r\n                util._extend(connectOptions.requestConfig,methodOptions.requestConfig);\r\n            }\r\n\r\n            if (validateReqResOptions(methodOptions.responseConfig)){\r\n                util._extend(connectOptions.responseConfig,methodOptions.responseConfig);\r\n            }\r\n\r\n\r\n        },\r\n        connect : function(method, url, args, callback, clientRequest){\r\n            //wrapper for emit function on client\r\n            var clientEmitterWrapper = function (client){\r\n                    var client = client;\r\n                    return function(type, event){client.emit(type, event);};\r\n                };\r\n\r\n            // check args type if we use it\r\n            if (callback && args && typeof args !== 'object')self.emit('error','args should be and object');\r\n\r\n            // configure connect options based on url parameter parse\r\n            var options = this.createConnectOptions(this.parsePathParameters(args,url), method);\r\n            debug(\"options pre connect\",options);\r\n            options.method = method,\r\n            clientRequest.href=options.href,\r\n            options.clientRequest = clientRequest,\r\n            options.headers= options.headers || {};\r\n            \r\n            debug(\"args = \", args);\r\n            debug(\"args.data = \", args !== undefined?args.data:undefined);\r\n            // no args passed\r\n            if (typeof args === 'function'){\r\n                callback = args;\r\n                // add Content-length to POST/PUT/DELETE/PATCH methods\r\n                if (method === 'POST' || method === 'PUT' || method === 'DELETE' || method === 'PATCH'){\r\n                    options.headers[CONSTANTS.HEADER_CONTENT_LENGTH] = 0;\r\n                }\r\n            } else if (typeof args === 'object') {\r\n                // add headers and POST/PUT/DELETE/PATCH data to connect options\r\n\t\t\t\t// to be passed\r\n                // with request, but without deleting other headers like\r\n\t\t\t\t// non-tunnel proxy headers\r\n                if (args.headers){\r\n                    for (var headerName in args.headers){\r\n                        if (args.headers.hasOwnProperty(headerName)) {\r\n                            options.headers[headerName] = args.headers[headerName];\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                \r\n \r\n                // we have args, go and check if we have parameters\r\n                if (args.parameters && Object.keys(args.parameters).length > 0){\r\n                  // validate URL consistency, and fix it adding query\r\n\t\t\t\t\t// parameter separation char\r\n\r\n                  // check if URL already has '?' path parameter separator\r\n\t\t\t\t\t// char in any position that is not final\r\n                  // if true throw error\r\n                  var pathLength = options.path.length,\r\n                  pathParameterSepCharPos = options.path.indexOf(\"?\");\r\n\r\n                  if (pathParameterSepCharPos >= 0 && pathParameterSepCharPos!== pathLength -1 )\r\n                   self.emit('error','parameters argument cannot be used if parameters are already defined in URL ' + options.path);\r\n\r\n               options.path +=(options.path.charAt(pathLength-1) === '?'?\"\":\"?\");\r\n                  // check if we have serializable parameter container, that\r\n\t\t\t\t\t// must be serialized and encoded\r\n                  // directly, as javascript object\r\n                  options.path = options.path.concat(Util.serializeEncodeQueryFromArgs(args.parameters));\r\n                  debug(\"options.path after request parameters = \", options.path);\r\n              }\r\n\r\n                // override client config, by the moment just for request\r\n\t\t\t\t// response config\r\n                this.overrideClientConfig(options,args);\r\n\r\n               // always set Content-length header if not set previously\r\n                // set Content lentgh for some servers to work (nginx, apache)\r\n                if (args.data !== undefined && !options.headers.hasOwnProperty(CONSTANTS.HEADER_CONTENT_LENGTH)){                    \r\n                    serializerManager.get(options).serialize(args.data, clientEmitterWrapper(self), function(serializedData){\r\n                        options.data = serializedData;\r\n                        options.headers[CONSTANTS.HEADER_CONTENT_LENGTH] = Buffer.byteLength(options.data, 'utf8');\r\n                    });                    \r\n                }else{\r\n                    options.headers[CONSTANTS.HEADER_CONTENT_LENGTH] = 0;\r\n                }\r\n\r\n\r\n            }\r\n            \r\n\r\n            debug(\"options post connect\",options);\r\n            debug(\"FINAL SELF object  ====>\", self);\r\n\r\n            if (self.useProxy && self.useProxyTunnel){\r\n                connectManager.proxy(options,callback);\r\n            }else{\r\n                // normal connection and direct proxy connections (no tunneling)\r\n                connectManager.normal(options,callback);\r\n            }\r\n        },\r\n        mergeMimeTypes:function(mimetypes){\r\n        \t// this function is left for backward compatibility, but will be\r\n        \t// deleted in future releases\r\n        \tvar parser = null;\r\n            // merge mime-types passed as options to parsers\r\n            if (mimetypes && typeof mimetypes === \"object\"){\r\n\t            try{\r\n\t            \tif (mimetypes.json && mimetypes.json instanceof Array && mimetypes.json.length > 0){                \t\r\n                \t\tparser = parserManager.find(\"JSON\");\r\n                \t\tparser.contentTypes = mimetypes.json;                    \r\n\t                }else if (mimetypes.xml && mimetypes.xml instanceof Array && mimetypes.xml.length > 0){\r\n\t                \tparser = parserManager.find(\"XML\");\r\n\t            \t\tparser.contentTypes = mimetypes.xml;                    \r\n\t                }\r\n\t        \t}catch(err){\r\n\t        \t\tself.emit('error', 'cannot assign custom content types to parser, cause: ' + err);\r\n\t        \t}\r\n            }\r\n        },\r\n        createHttpMethod:function(methodName){\r\n            return function(url, args, callback){\r\n                var clientRequest = new ClientRequest();\r\n                Util.connect(methodName.toUpperCase(), url, args, callback, clientRequest);\r\n                return clientRequest;\r\n            };\r\n        }\r\n    },\r\n    Method = function(url, method){\r\n        var httpMethod = self[method.toLowerCase()];\r\n        \r\n        return  function(args,callback){\r\n            var completeURL = url;\r\n                    // no args\r\n                    if (typeof args === 'function'){\r\n                        callback = args;\r\n                        args = {};\r\n                    }\r\n\r\n                    return httpMethod(completeURL, args , callback);\r\n                };\r\n            };\r\n\r\n\r\n\r\n\r\n            this.get = Util.createHttpMethod(\"get\");\r\n\r\n            this.post = Util.createHttpMethod(\"post\");\r\n            \r\n            this.put = Util.createHttpMethod(\"put\");\r\n\r\n            this.delete = Util.createHttpMethod(\"delete\");\r\n\r\n            this.patch = Util.createHttpMethod(\"patch\");\r\n\r\n\r\n            this.registerMethod = function(name, url, method){\r\n        // create method in method registry with preconfigured REST invocation\r\n        // method\r\n        this.methods[name] = new Method(url,method);\r\n    };\r\n\r\n    this.unregisterMethod = function(name){\r\n        delete this.methods[name];\r\n    };\r\n\r\n    this.addCustomHttpMethod=function(methodName){\r\n        self[methodName.toLowerCase()] = Util.createHttpMethod(methodName);\r\n    };\r\n\r\n    this.parsers = ioFacade.parsers;\r\n\r\n    this.serializers = ioFacade.serializers;\r\n   \r\n    // merge mime types with connect manager\r\n    Util.mergeMimeTypes(self.mimetypes);\r\n    debug(\"ConnectManager\", connectManager);\r\n\r\n};\r\n\r\n\r\nvar ConnectManager = function(client, parserManager) {\r\n   \r\n    var client = client,\r\n    clientEmitterWrapper = function (client){\r\n                    var client = client;\r\n                    return function(type, event){client.emit(type, event);};\r\n                };\r\n    \r\n  \r\n\r\n    this.configureRequest = function(req, config, clientRequest){\r\n\r\n        if (config.timeout){\r\n            req.setTimeout(config.timeout, function(){\r\n                clientRequest.emit('requestTimeout',req);\r\n            });\r\n        }\r\n        \r\n\r\n        if(config.noDelay)\r\n            req.setNoDelay(config.noDelay);\r\n\r\n        if(config.keepAlive)\r\n            req.setSocketKeepAlive(config.noDelay,config.keepAliveDelay || 0);\r\n        \r\n    };\r\n\r\n    this.configureResponse = function(res,config, clientRequest){\r\n        if (config.timeout){\r\n            res.setTimeout(config.timeout, function(){\r\n                clientRequest.emit('responseTimeout',res);\r\n                res.close();\r\n            });\r\n        }\r\n    };\r\n\r\n    this.configureOptions = function(options){\r\n        var followRedirectsProps =[\"followRedirects\", \"maxRedirects\"];\r\n        function configureProps(propsArray, optionsElement){\r\n            for (var index in propsArray){\r\n                if (optionsElement.hasOwnProperty(propsArray[index]))\r\n                    options[propsArray[index]] = optionsElement[propsArray[index]];        \r\n            }    \r\n        }\r\n        \r\n        //add follows-redirects config\r\n        configureProps(followRedirectsProps, options.requestConfig);\r\n        \r\n\r\n        // remove \"protocol\" and \"clientRequest\" option from options,\r\n        // cos is not allowed by http/hppts node objects\r\n        delete options.protocol;\r\n        delete options.clientRequest;\r\n        delete options.requestConfig;\r\n        delete options.responseConfig;\r\n        debug(\"options pre connect\", options);\r\n    };\r\n\r\n    this.handleEnd = function(res,buffer,callback){\r\n\r\n        var self = this,\r\n        content = res.headers[\"content-type\"],\r\n        encoding = res.headers[\"content-encoding\"];\r\n        \r\n        debug(\"content-type: \", content);\r\n        debug(\"content-encoding: \",encoding);\r\n\r\n        if(encoding !== undefined && encoding.indexOf(\"gzip\") >= 0){\r\n            debug(\"gunzip\");\r\n            zlib.gunzip(Buffer.concat(buffer),function(er,gunzipped){\r\n                self.handleResponse(res,gunzipped,callback);\r\n            });\r\n        }else if(encoding !== undefined && encoding.indexOf(\"deflate\") >= 0){\r\n            debug(\"inflate\");\r\n            zlib.inflate(Buffer.concat(buffer),function(er,inflated){\r\n                self.handleResponse(res,inflated,callback);\r\n            });\r\n        }else {\r\n            debug(\"not compressed\");\r\n            self.handleResponse(res,Buffer.concat(buffer),callback);\r\n        }\r\n    };\r\n\r\n    this.handleResponse = function(res,data,callback){\r\n        // find valid parser to be used with response content type, first one\r\n\t\t// found\r\n        parserManager.get(res).parse(data, clientEmitterWrapper(client), function(parsedData){\r\n            callback(parsedData,res);\r\n        });\r\n    };\r\n\r\n    this.prepareData = function(data){\r\n        var result;\r\n        if ((data instanceof Buffer) || (typeof data !== 'object')){\r\n            result = data;\r\n        }else{\r\n            result = JSON.stringify(data);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    this.proxy = function(options, callback){\r\n\r\n        debug(\"proxy options\",options.proxy);\r\n\r\n            // creare a new proxy tunnel, and use to connect to API URL\r\n            var proxyTunnel = http.request(options.proxy),\r\n            self = this;\r\n            \r\n            \r\n            proxyTunnel.on('connect',function(res, socket, head){\r\n                debug(\"proxy connected\",socket);\r\n\r\n                // set tunnel socket in request options, that's the tunnel\r\n\t\t\t\t// itself\r\n                options.socket = socket;\r\n\r\n                var buffer=[],\r\n                protocol = (options.protocol ==\"http\")?http:https,\r\n                clientRequest = options.clientRequest,\r\n                requestConfig = options.requestConfig,\r\n                responseConfig = options.responseConfig;\r\n                \r\n                self.configureOptions(options);\r\n\r\n                // add request options to request returned to calling method\r\n                clientRequest.options = options;\r\n\r\n                var request = protocol.request(options, function(res){\r\n                        // configure response\r\n                        self.configureResponse(res,responseConfig, clientRequest);\r\n\r\n                        // concurrent data chunk handler\r\n                        res.on('data',function(chunk){\r\n                            buffer.push(new Buffer(chunk));\r\n                        });\r\n\r\n                        res.on('end',function(){\r\n                            self.handleEnd(res,buffer,callback);\r\n                        });\r\n\r\n\r\n                        // handler response errors\r\n                        res.on('error',function(err){\r\n                            if (clientRequest !== undefined && typeof clientRequest === 'object'){\r\n                                // add request as property of error\r\n                                err.request = clientRequest;\r\n                                err.response =  res;\r\n                                // request error handler\r\n                                clientRequest.emit('error',err);\r\n                            }else{\r\n                                // general error handler\r\n                                client.emit('error',err);\r\n                            }\r\n                        });\r\n                    });\r\n\r\n\r\n\r\n                // configure request and add it to clientRequest\r\n                // and add it to request returned\r\n                self.configureRequest(request,requestConfig, clientRequest);\r\n                clientRequest.setHttpRequest(request);\r\n\r\n\r\n                // write POST/PUT data to request body;\r\n                // find valid serializer to be used to serialize request data,\r\n\t\t\t\t// first one found\r\n                // is the one to be used.if none found for match condition,\r\n\t\t\t\t// default serializer is used\r\n\r\n               if(options.data)request.write(options.data);\r\n\r\n                request.end();\r\n                \r\n               \r\n               // handle request errors and handle them by request or general\r\n\t\t\t\t// error handler\r\n               request.on('error',function(err){\r\n                   if (clientRequest !== undefined && typeof clientRequest === 'object'){\r\n                       // add request as property of error\r\n                       err.request = clientRequest;\r\n                       \r\n                       // request error handler\r\n                       clientRequest.emit('error',err);\r\n                   }else{\r\n                       // general error handler\r\n                       client.emit('error',err);\r\n                   }\r\n               });\r\n            });\r\n\r\n            // proxy tunnel error are only handled by general error handler\r\n            proxyTunnel.on('error',function(e){\r\n                client.emit('error',e);\r\n            });\r\n\r\n            proxyTunnel.end();\r\n            \r\n        };\r\n\r\n        this.normal = function(options, callback){\r\n\r\n            var buffer = [],\r\n            protocol = (options.protocol === \"http\")?http:https,\r\n            clientRequest = options.clientRequest,\r\n            requestConfig = options.requestConfig,\r\n            responseConfig = options.responseConfig,\r\n            self = this;\r\n            \r\n                self.configureOptions(options);\r\n\r\n                // add request options to request returned to calling method\r\n                clientRequest.options = options;\r\n\r\n                var request = protocol.request(options, function(res){\r\n                        // configure response\r\n                        self.configureResponse(res,responseConfig, clientRequest);\r\n\r\n                        // concurrent data chunk handler\r\n                        res.on('data',function(chunk){\r\n                            buffer.push(new Buffer(chunk));\r\n                        });\r\n\r\n                        res.on('end',function(){\r\n\r\n                            self.handleEnd(res,buffer,callback);\r\n\r\n                        });\r\n\r\n                        // handler response errors\r\n                        res.on('error',function(err){\r\n                            if (clientRequest !== undefined && typeof clientRequest === 'object'){\r\n                            \t// add request as property of error\r\n                                err.request = clientRequest;\r\n                                err.response = res;\r\n                                // request error handler\r\n                                clientRequest.emit('error',err);\r\n                            }else{\r\n                                // general error handler\r\n                                client.emit('error',err);\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                // configure request and add it to clientRequest\r\n                // and add it to request returned\r\n                self.configureRequest(request,requestConfig, clientRequest);\r\n                debug(\"clientRequest\",clientRequest);\r\n\r\n                clientRequest.setHttpRequest(request);\r\n\r\n                debug(\"options data\", options.data);\r\n                // write POST/PUT data to request body;\r\n                // find valid serializer to be used to serialize request data,\r\n\t\t\t\t// first one found\r\n                // is the one to be used.if none found for match condition,\r\n\t\t\t\t// default serializer is used\r\n                if(options.data)request.write(options.data);\r\n                request.end(); // end request when data is written\r\n\r\n                // handle request errors and handle them by request or general\r\n\t\t\t\t// error handler\r\n                request.on('error',function(err){\r\n                    if (clientRequest !== undefined && typeof clientRequest === 'object'){\r\n                        // add request as property of error\r\n                        err.request = clientRequest;\r\n                        \r\n                        // request error handler\r\n                        clientRequest.emit('error',err);\r\n                    }else{\r\n                        // general error handler\r\n                        client.emit('error',err);\r\n                    }\r\n                });            \r\n        };\r\n    };\r\n\r\n\r\n    // event handlers for client and ConnectManager\r\n    util.inherits(exports.Client, events.EventEmitter);   \r\n\r\n\r\n    var debug = function(){\r\n        if (!process.env.DEBUG) return;\r\n\r\n        var now = new Date(),\r\n        header =now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds() +  \" [NRC CLIENT]\" + arguments.callee.caller.name + \" -> \",\r\n        args = Array.prototype.slice.call(arguments);\r\n        args.splice(0,0,header);\r\n        node_debug.apply(console,args);\r\n\r\n\r\n    };\r\n"}